import { useCreateStudent } from "@/features/student/useCreateStudent";
import { useFetchStudents } from "@/features/student/useFetchStudents";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Spinner,
  Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  VStack,
  useToast,
} from "@chakra-ui/react";
import { useFormik } from "formik";
import Head from "next/head";

export default function Home() {
  // ambil dari return useStudent, GET Students
  const { data, isLoading: isLoadingStudent, refetch:refetchStudent } = useFetchStudents();
  // muncul toast ketika berhasil add student
  const toast = useToast();
  // handdle validasi form
  const formik = useFormik({
    initialValues: {
      nama: "",
      tanggalLahir: "",
      jenisKelamin: "",
      alamat: "",
      kelas: "",
      jurusan: "",
    },
    // Post ke API Student
    onSubmit: () => {
      // body yang dikirim
      const { nama, tanggalLahir, jenisKelamin, alamat, kelas, jurusan } =
        formik.values;
      // console.log(formik.values);
      // mutete diambil paramater dari useMutation
      mutate({
        nama,
        tanggalLahir,
        jenisKelamin,
        alamat,
        kelas,
        jurusan,
      });
      // setelah berhasil post, maka form input di reset
      formik.setFieldValue("nama", "");
      formik.setFieldValue("tanggalLahir", "");
      formik.setFieldValue("jenisKelamin", "");
      formik.setFieldValue("alamat", "");
      formik.setFieldValue("kelas", "");
      formik.setFieldValue("jurusan", "");
      // mencetak toast
      toast({
        title: "Success",
        description: "Student created successfully",
        status: "success",
      });
    },
  });
  const { mutate, isLoading: createStudentIsLoading } = useCreateStudent({
    // ketika add sukses, otomatis data di update
    onSuccess: () => {
      refetchStudent ();
    }
  });

  const handdleInputForm = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const renderProducts = () => {
    return data?.map((student) => {
      return (
        <Tr key={student._id}>
          <Td>{student._id}</Td>
          <Td>{student.nama}</Td>
          <Td>{student.tanggalLahir}</Td>
          <Td>{student.jenisKelamin}</Td>
          <Td>{student.alamat}</Td>
          <Td>{student.kelas}</Td>
          <Td>{student.jurusan}</Td>
        </Tr>
      );
    });
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Home Page</Heading>
          <Table mb={10}>
            <Thead>
              <Tr>
                <Th>ID</Th>
                <Th>Nama</Th>
                <Th>Tanggal Lahir</Th>
                <Th>Jenis Kelamin</Th>
                <Th>Alamat</Th>
                <Th>Kelas</Th>
                <Th>Jurusan</Th>
              </Tr>
            </Thead>
            <Tbody>
              {isLoadingStudent ? <Spinner /> : null}
              {renderProducts()}
            </Tbody>
          </Table>
          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={2}>
              {/* menangkap form input */}
              <Text>{formik.values.alamat}</Text>
              <FormControl>
                <FormLabel>Nama</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="nama"
                  value={formik.values.nama}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Tanggal Lahir</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="tanggalLahir"
                  type="date"
                  value={formik.values.tanggalLahir}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Jenis Kelamin</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="jenisKelamin"
                  value={formik.values.jenisKelamin}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Alamat</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="alamat"
                  value={formik.values.alamat}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Kelas</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="kelas"
                  type="number"
                  value={formik.values.kelas}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Jurusan</FormLabel>
                <Input
                  onChange={handdleInputForm}
                  name="jurusan"
                  value={formik.values.jurusan}
                />
              </FormControl>
              {createStudentIsLoading ? <Spinner /> : null}
              <Button type="submit" bg={"blue.500"}>
                Add Student
              </Button>
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
